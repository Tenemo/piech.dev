// AUTO-GENERATED at build time. Do not edit by hand.
// Source: react-router.config.ts -> generateGithubData()
export type RepositoryInfo = { name: string; description: string };
export const REPOSITORY_INFO: Partial<Record<string, RepositoryInfo>> = {
    'threshold-elgamal': {
        name: 'threshold-elgamal',
        description:
            'A TypeScript library with functions implementing selected ElGamal cryptographic algorithms on top of native JavaScript BigInteger. Its core includes key generation, encryption, and decryption. It is extended with support for threshold encryption. Supports Node.js and the browser. Used by https://sealed.vote.',
    },
    'sealed-vote-web': {
        name: 'sealed-vote-web',
        description:
            'A browser-based application relying on homomorphic encryption allowing for ranked-choice voting with ranking choices from 1 to 10 in a way such that nobody, including the server, can know what the individual choices were! Only the result is publicly known. Uses the threshold-elgamal package: https://www.npmjs.com/package/threshold-elgamal.',
    },
    bob: {
        name: 'bob',
        description:
            'Hexapod breadboard-on-legs toy project based on ESP32-S3 with a voice, camera vision, autonomous basic movement and seeing. Uses OpenAI Realtime API and Structured Output API to process visual data and talk to the user in (delayed, due to processing power constraints) real time with a realistic voice.',
    },
    reactplate: {
        name: 'reactplate',
        description:
            'A React + modern Redux (RTK) boilerplate for a fully configured quick start with automatic formatting and linting with ESLint & Prettier. VS Code settings bundled with the boilerplate, including recommended extensions for automatic formatting - via a one-click install. Scores perfect 100/100/100/100 score in Chrome Lighthouse.',
    },
    expressplate: {
        name: 'expressplate',
        description:
            'An Express.js REST API opinionated boilerplate designed for building scalable and maintainable web applications. Pre-configured environment with TypeScript, Express.js, and great VS Code integration.',
    },
    'aliases.sh': {
        name: 'aliases.sh',
        description:
            "My curated list of bash aliases that I use, hosted online so that I can access it easily from anywhere, especially on new devices. It's aimed mostly at developers using git and NPM, but it has other useful aliases as well. Includes an alias concatenating the whole directory into a text file for LLM workflows.",
    },
    'tiles-town': {
        name: 'tiles-town',
        description:
            'Puzzle game with a global scoreboard requiring you to flip all tiles to the same side. Built ages ago in jQuery as a toy project to learn JavaScript better, then rewritten in 2016-ish to learn React + Redux, more recently rewritten to TypeScript.',
    },
    'particle-golf': {
        name: 'particle-golf',
        description:
            "Toy project for tracing particle paths governed by solving each coordinate's formula with a time variable in 60+ fps. Developed to learn three.js and WebGL.",
    },
} as Partial<Record<string, RepositoryInfo>>;
export const README_CONTENT: Partial<Record<string, string>> = {
    'threshold-elgamal':
        '# Threshold ElGamal\n\n[![npm version](https://badge.fury.io/js/threshold-elgamal.svg)](https://badge.fury.io/js/threshold-elgamal)\n\nA TypeScript library with a collection of functions implementing selected ElGamal cryptographic algorithms in TypeScript on top of native JavaScript BigInteger. Its core includes ElGamal functions for key generation, encryption, and decryption. It is extended with support for threshold encryption. **Runs both in Node and in browsers.** Used by [sealed.vote](https://sealed.vote).\n\n**WIP: Early version. Thresholds when set below the number of scheme participants don\'t behave as expected.**\nHowever, it works correctly with `threshold == participantsCount`, which is its main use case for myself for now.\n\nIt was written as cleanly as possible, modularized, and with long, explicit variable names. It includes out-of-the-box VS Code configuration, including recommended extensions for working with the library and/or contributing.\n\n**This is not a cryptographically audited library, make sure you know what you are doing before using it.**\n\n## Documentation\n\nFor a detailed list of exported types and functions, [click here](https://tenemo.github.io/threshold-elgamal/modules.html).\n\n## Contributing\n\nThe JavaScript/TypeScript ecosystem seems to be lacking in modern, functional ElGamal libraries that work out of the box with reasonable default (this library isn\'t at that point yet). All PRs are welcome.\n\n## Libraries/tools used\n\n-   TypeScript\n-   Vitest\n-   ESLint + Prettier\n-   Typedoc\n\n## Production dependencies\n\n-   [bigint-mod-arith](https://www.npmjs.com/package/bigint-mod-arith)\n\nIt has no other production dependencies apart from this one. It could be inlined easily, if needed.\n\n## TODO\n\n-   Hashing messages\n-   Support for additive property of exponents, not just native ElGamal multiplication\n-   consider using {} function params for better readability and consistency in param naming\n-   ZK proofs\n-   Validation\n\n## Installation\n\nTo use it in your project, install it first:\n\n```bash\nnpm install --save threshold-elgamal\n```\n\n## Examples\n\nFirst, import the whatever functions you need from the library:\n\n```typescript\nimport { generateParameters, encrypt, decrypt } from "threshold-elgamal";\n```\n\n### Generating keys, encrypting and decrypting a secret\n\n```typescript\n// Generate a public/private key pair\n// If prime and generator aren\'t specified, they default to the 2048-bit group.\nconst { publicKey, privateKey, prime, generator } = generateParameters();\n\n// Encrypt a message using the public key:\nconst secret = 859;\nconst encryptedMessage = encrypt(secret, publicKey, prime, generator);\n\n// Decrypt the message using the private key:\nconst decryptedMessage = decrypt(encryptedMessage, prime, privateKey);\n// console.log(decryptedMessage); // 859\n```\n\n### Single secret shared with 3 participants\n\nThreshold scheme for generating a common public key, sharing a secret to 3 participants using that key and requiring all three participants to decrypt it.\n\n```typescript\nimport {\n    encrypt,\n    generateKeys,\n    combinePublicKeys,\n    createDecryptionShare,\n    combineDecryptionShares,\n    thresholdDecrypt,\n} from "threshold-elgamal";\n\nconst threshold = 3; // A scenario for 3 participants with a threshold of 3\n\n// Each participant generates their public key share and private key individually\nconst participant1Keys = generateKeys(1, threshold);\nconst participant2Keys = generateKeys(2, threshold);\nconst participant3Keys = generateKeys(3, threshold);\n\n// Combine the public keys to form a single public key\nconst commonPublicKey = combinePublicKeys([\n    participant1Keys.publicKey,\n    participant2Keys.publicKey,\n    participant3Keys.publicKey,\n]);\n\n// Encrypt a message using the combined public key\nconst secret = 42;\nconst encryptedMessage = encrypt(secret, commonPublicKey);\n\n// Decryption shares\nconst decryptionShares = [\n    createDecryptionShare(encryptedMessage, participant1Keys.privateKey),\n    createDecryptionShare(encryptedMessage, participant2Keys.privateKey),\n    createDecryptionShare(encryptedMessage, participant3Keys.privateKey),\n];\n// Combining the decryption shares into one, used to decrypt the message\nconst combinedDecryptionShares = combineDecryptionShares(decryptionShares);\n\n// Decrypting the message using the combined decryption shares\nconst thresholdDecryptedMessage = thresholdDecrypt(\n    encryptedMessage,\n    combinedDecryptionShares,\n);\nconsole.log(thresholdDecryptedMessage); // 42\n```\n\n### Voting and multiplication with threshold scheme for 3 participants\n\nThis example demonstrates a 1 to 10 voting scenario where 3 participants cast encrypted votes on two options. The encrypted votes are aggregated, multiplied with each other and then require all three participants to decrypt the final tally. The decryption does not work on individual votes, meaning that it is impossible to decrypt their votes even after decrypting the result.\n\n```typescript\nimport {\n    encrypt,\n    generateKeys,\n    combinePublicKeys,\n    createDecryptionShare,\n    combineDecryptionShares,\n    thresholdDecrypt,\n    multiplyEncryptedValues,\n} from "threshold-elgamal";\n\nconst threshold = 3; // A scenario for 3 participants with a threshold of 3\n\n// Each participant generates their public key share and private key individually\nconst participant1Keys = generateKeys(1, threshold);\nconst participant2Keys = generateKeys(2, threshold);\nconst participant3Keys = generateKeys(3, threshold);\n\n// Combine the public keys to form a single public key\nconst commonPublicKey = combinePublicKeys([\n    participant1Keys.publicKey,\n    participant2Keys.publicKey,\n    participant3Keys.publicKey,\n]);\n\n// Participants cast their encrypted votes for two options\nconst voteOption1 = [6, 7, 1]; // Votes for option 1 by participants 1, 2, and 3\nconst voteOption2 = [10, 7, 4]; // Votes for option 2 by participants 1, 2, and 3\n\n// Encrypt votes for both options\nconst encryptedVotesOption1 = voteOption1.map((vote) =>\n    encrypt(vote, commonPublicKey),\n);\nconst encryptedVotesOption2 = voteOption2.map((vote) =>\n    encrypt(vote, commonPublicKey),\n);\n\n// Multiply encrypted votes together to aggregate\nconst aggregatedEncryptedVoteOption1 = encryptedVotesOption1.reduce(\n    (talliedVotes, encryptedVote) =>\n        multiplyEncryptedValues(talliedVotes, encryptedVote),\n    { c1: 1n, c2: 1n },\n);\nconst aggregatedEncryptedVoteOption2 = encryptedVotesOption2.reduce(\n    (talliedVotes, encryptedVote) =>\n        multiplyEncryptedValues(talliedVotes, encryptedVote),\n    { c1: 1n, c2: 1n },\n);\n\n// Each participant creates a decryption share for both options.\n// Notice that the shares are created for the aggregated, multiplied tally specifically,\n// not the individual votes. This means that they can be used ONLY for decrypting the aggregated votes.\nconst decryptionSharesOption1 = [\n    createDecryptionShare(\n        aggregatedEncryptedVoteOption1,\n        // The order of the shares does not matter during decryption.\n        participant3Keys.privateKey,\n    ),\n    createDecryptionShare(\n        aggregatedEncryptedVoteOption1,\n        participant1Keys.privateKey,\n    ),\n    createDecryptionShare(\n        aggregatedEncryptedVoteOption1,\n        participant2Keys.privateKey,\n    ),\n];\nconst decryptionSharesOption2 = [\n    createDecryptionShare(\n        aggregatedEncryptedVoteOption2,\n        participant2Keys.privateKey,\n    ),\n    createDecryptionShare(\n        aggregatedEncryptedVoteOption2,\n        participant1Keys.privateKey,\n    ),\n    createDecryptionShare(\n        aggregatedEncryptedVoteOption2,\n        participant3Keys.privateKey,\n    ),\n];\n\n// Combine decryption shares and decrypt the aggregated votes for both options.\n// Notice that the private keys of the participants never leave their possession.\n// Only the decryption shares are shared with other participants.\nconst combinedDecryptionSharesOption1 = combineDecryptionShares(\n    decryptionSharesOption1,\n);\nconst combinedDecryptionSharesOption2 = combineDecryptionShares(\n    decryptionSharesOption2,\n);\n\nconst finalTallyOption1 = thresholdDecrypt(\n    aggregatedEncryptedVoteOption1,\n    combinedDecryptionSharesOption1,\n);\nconst finalTallyOption2 = thresholdDecrypt(\n    aggregatedEncryptedVoteOption2,\n    combinedDecryptionSharesOption2,\n);\n\nconsole.log(\n    `Final tally for Option 1: ${finalTallyOption1}, Option 2: ${finalTallyOption2}`,\n); // 42, 280\n```\n\nThis example can be extended with calculating a geometric mean for the candidate options to better present the results.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n',
    'sealed-vote-web':
        '# sealed-vote-web\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/431089b8-8373-4038-8b80-fb3a7aa02c6e/deploy-status)](https://app.netlify.com/sites/sealed-vote/deploys)\n\n## Overview\n\n[Sealed.vote](https://sealed.vote) is a browser-based application relying on homomorphic encryption allowing for ranked-choice voting with ranking choices from 1 to 10 in a way such that **nobody, including the server, can know what the individual choices were!** Only the result is publicly known. If it sounds like magic, you might enjoy reading up on what homomorphic encryption is and how it works. Detailed explanation on how voting works [is available here.](docs/voting.md)\n\nhttps://github.com/user-attachments/assets/f4334c3c-1781-462c-9f0e-3e7ccda372f1\n\nIn addition to this repository, there is a also an [open-source server component](https://github.com/Tenemo/sealed-vote-server). Both the frontend and server component rely on [threshold-elgamal](https://www.npmjs.com/package/threshold-elgamal), which is a modern, TypeScript cryptographic library written specifically for this project.\n\n## Technologies used (frontend)\n\n-   TypeScript\n-   React\n-   Redux Toolkit & React-Redux\n-   Material-UI\n-   Webpack & Babel\n-   ESLint & Prettier\n\n## Running the frontend project\n\n### Requirements\n\nTo run sealed-vote-web, you will need the following prerequisites installed on your system:\n\n-   Node.js\n-   npm\n\n### Launching the application\n\nTo get the project up and running on your local machine, follow these steps:\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/Tenemo/sealed-vote-web.git\n```\n\n2. Navigate to the project directory:\n\n```bash\ncd sealed-vote-web\n```\n\n3. Install dependencies:\n\n```bash\nnpm install\n```\n\n4. Start the development server:\n\n```bash\nnpm start\n```\n\n### Building for production\n\n```bash\nnpm run build\n```\n',
    bob: "# Bob\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/064eb119-d22e-4a70-9b0b-50c7c18712ab/deploy-status)](https://app.netlify.com/sites/bob-client/deploys)\n\nHexapod breadboard-on-legs toy project based on ESP32-S3 with a voice, camera vision, autonomous basic movement and seeing. Uses OpenAI Realtime API and Structured Output API to process visual data and talk to the user in (delayed, due to processing power constraints) real time with a realistic voice.\n\n## Demo\n\nDemo (with sound) of the robot booting up, speaking, moving and seeing.\n\nhttps://github.com/user-attachments/assets/bbba81ba-5eeb-43fc-8d48-552be9b4c37b\n\nNote that the Realtime API calls appropriate \"tools\" itself, I don't explicitly tell it to use the camera or the movement methods.\n\n## Overview\n\nBob is a hexapod robot controlled by a web app that can:\n- Talk to you in many different languages. It uses the latest (as of March 2025) OpenAI Realtime API version to do that.\n- See what's in front of it using a wide-angle camera module. The Realtime API doesn't support images, so the image first is described into JSON using an OpenAI old-school text API with Structured Output. The output is then passed to the Realtime API.\n- Autonomously, based on what you tell it do to, decide what it wants to use, camera or movement capabilities.\n- Stand up, sit down, and wiggle - unfortunately I couldn't get it to walk properly, the servomotors used ended up being too weak, mostly due to the battery weight.\n- Stay powered using its onboard 2220 mAH power supply.\n- Output logs to the onboard LCD display.\n\n![bob_camera](https://github.com/user-attachments/assets/d629813a-951a-4147-8271-3bfea1b55f13)\n![bob_top](https://github.com/user-attachments/assets/c647f8c9-22f2-4072-9830-78c0b706d7cf)\n![bob_underside](https://github.com/user-attachments/assets/38bd589b-22ac-4261-b01d-05b78a0e3a40)\n\n\n## Components\n\n### Hardware\n\n- FireBeetle 2 board ESP32-S3-U (N16R8)\n- OV2640 camera module\n- MAX98357A decoder stereo DAC with built-in class D amplifier\n- Step-down voltage regulator D24V90F5 - 5V 9A (Pololu 2866)\n- PCA9685 PWM controller\n- 12x SG90 Servo motors\n- TFT 1.8\" 128x160px SPI display\n- 2220 mAh 7.4 volt Li-pol battery\n\n### Software\n\n#### Embedded (ESP32)\n\n- Async web server for API endpoints\n- I2C communication for peripherals\n- SPIFFS file system for storage\n- PSRAM audio caching\n- PWM servo control\n- I2S audio output\n\n#### Client (bob-client)\n\n- React-based web interface\n- Redux for state management\n- Material-UI components\n- Real-time video display\n- Interactive controls for robot movement\n- OpenAI vision analysis display\n",
    reactplate:
        '# reactplate\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/26fb7e7c-f69d-40fa-b142-92a32d30b80f/deploy-status)](https://app.netlify.com/sites/reactplate-tenemo/deploys)\n\nA React + modern Redux (RTK) boilerplate for a fully configured quick start with automatic formatting and linting with ESLint & Prettier.\n\n- Strict ESLint TypeScript linting and automatic formatting with zero additional configuration needed.\n- VS Code settings bundled with the boilerplate, including recommended extensions for automatic formatting - via a one-click install.\n- Optional [Sentry.io](https://sentry.io) integration.\n- Deployed to [Netlify](https://netlify.com) with an example catch-all redirect to always utilize react-router: [reactplate.com](https://reactplate.com)\n\nThe template follows best practices such as:\n\n- semantic, accessible HTML,\n- pre-connects to the API it uses,\n- displays available system font when loading custom fonts,\n- robot.txt included by default,\n\nand many others. It scores perfect 100/100/100/100 score in Chrome Lighthouse. <br />\n<img src="docs/lighthouse.png" alt="Vitest example" title="Vitest example" width="500" />\n\n## Features\n\n### React\n\n- React 19\n- React Router 7\n- Catch-all 404 page\n- Light/dark themes with a toggle\n\n### State management\n\n- Modern Redux setup\n- Redux Toolkit (RTK), including a RTK Query live example\n- Store setup and usage is fully & properly typed\n- Example integration test using the store\n\n### Linting & formatting\n\n- ESLint v. 9 with ready-to-go, **strict** configuration. Notable plugins:\n    - typescript-eslint for full TypeScript integration and strict typing rules\n    - Prettier plugin to use prettier as formatter\n    - Import & unused imports\n    - React & react-hooks\n    - Vitest\n    - jsx-a11y (accessibility)\n- VS Code settings, including ESLint set up as a formatter with Prettier integration - **formatting & quick fixes in one pass**!\n- Stylelint SCSS linting\n- .editorconfig for consistent code style across different editors\n\n### Styling\n\n- SCSS modules\n- CSS variables utilized for theming with no dark/light duplication in components\n- Full typing for SCSS - strict typechecking for classes! <br />\n  <img src="docs/styles_typescript_suggestion.png" alt="TypeScript suggestions example" title="TypeScript suggestions example" width="500" />\n\n- Custom font\n- PostCSS processing (autoprefixer, flexbugs-fixes)\n- Normalize.css\n\n### Testing\n\n- Vitest\n- React Testing Library <br />\n  <img src="docs/vitest_example.png" alt="Vitest example" title="Vitest example" width="300" />\n\nExample usage with Redux and Redux Toolkit included.\n\n### Build & development\n\n- Vite, fast cold starts & hot 🔥 reload <br />\n  <img src="docs/vite_cold_start.png" alt="Vite cold start" title="Vite cold start" width="300" />\n- Automatic aliases for all src/ subdirectories <br />\n  <img src="docs/aliases_example.png" alt="Aliases example" title="Aliases example" width="400" />\n- Environment variables with validation <br />\n  <img  src="docs/missing_environment_variable.png" alt="Missing environment variable error" title="Missing environment variable error" width="300" />\n- Husky pre-commit hook with linting, typechecking and tests running automatically before each commit.\n\n## Getting started\n\n### Prerequisites\n\n- Node.js >=20.11.0\n- NPM (comes with Node.js)\n\n### Installation\n\n1. Clone the repository:\n\n    ```bash\n    git clone https://github.com/Tenemo/reactplate.git\n    cd reactplate\n    ```\n\n2. Install dependencies:\n\n    ```bash\n    npm install\n    ```\n\n3. Create environment variables file:\n    ```bash\n    cp .env.sample .env\n    ```\n    Add your Sentry DSN in the .env file if you want error tracking. Otherwise, feel free to add your own environment variables or remove the .env handling altogether.\n\n### Development\n\n1. Start the development server:\n\n    ```bash\n    npm run dev\n    ```\n\n    This will launch the application at http://localhost:3000 with hot reloading enabled.\n\n2. Run tests:\n    ```bash\n    npm test  # Run tests once\n    npm run test:watch # Run tests in watch mode\n    npm run test:coverage # Generate test coverage report\n    ```\n\n### Building for Production\n\n```bash\nnpm run build\n```\n\nTo build without running linting and tests:\n\n```bash\nnpm run build:skip\n```\n\nTo analyze your bundle size:\n\n```bash\nnpm run build:analyze\n```\n\n### VS Code\n\nFor the best development experience in VS Code install recommended VS Code extensions when prompted. All necessary configuration is already present in `.vscode/settings.json`\n\n## License\n\nThis project is licensed under the MIT License - a permissive free software license that places almost no restrictions on what you can do with this project.\n',
    expressplate:
        '# expressplate\r\n\r\nAn Express.js REST API opinionated boilerplate designed for building scalable and maintainable web applications. Pre-configured environment with TypeScript, Express.js, and great VS Code integration.\r\n\r\n- Strict ESLint TypeScript linting and automatic formatting with zero additional configuration needed.\r\n- VS Code settings bundled with the boilerplate, including recommended extensions for automatic formatting - via a one-click install.\r\n\r\n## Features\r\n\r\n### Core technologies\r\n\r\n- TypeScript with strict typing rules\r\n- Express.js REST API setup\r\n- Environment variable validation and configuration\r\n\r\n### Logging\r\n\r\n- Winston & Morgan for robust logging\r\n- Log rotation with daily files\r\n- Separate error logs\r\n- Console logging overrides for consistent formatting\r\n\r\n### Code quality\r\n\r\n- ESLint v9 with strict configuration:\r\n    - typescript-eslint for full TypeScript integration\r\n    - Prettier plugin for formatting\r\n    - Import & unused imports detection\r\n    - Security plugin\r\n    - Vitest support\r\n- VS Code settings, including ESLint set up as a formatter with Prettier integration - **formatting & quick fixes in one pass**!\r\n- Prettier integrated with ESLint\r\n- Husky pre-commit hooks\r\n- .editorconfig for consistent code style across different editors\r\n\r\n### Testing\r\n\r\n- Vitest testing framework\r\n\r\n## Getting started\r\n\r\nTo get started with `expressplate`, clone the repository and install dependencies:\r\n\r\n```bash\r\ngit clone https://github.com/Tenemo/expressplate.git\r\ncd expressplate\r\nnpm install\r\n```\r\n\r\n### Configuration\r\n\r\n    ```bash\r\n    cp .env.sample .env\r\n    ```\r\n\r\nCreate the .env file in the root directory and adjust the variables as needed.\r\n\r\n### Development\r\n\r\nTo start the development server with nodemon:\r\n\r\n```bash\r\nnpm run dev\r\n```\r\n\r\n### Build\r\n\r\nTo compile TypeScript to JavaScript and build the project for production:\r\n\r\n```bash\r\nnpm run build\r\n```\r\n\r\n### Deployment\r\n\r\nDeploy the built application by starting the server with:\r\n\r\n```bash\r\nnpm start\r\n```\r\n\r\nThis will run the compiled JavaScript code from the `dist` directory.\r\n\r\n### Running tests\r\n\r\nTo run tests using Vitest:\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n### Code quality\r\n\r\nLint your code and fix formatting issues:\r\n\r\n```bash\r\nnpm run lint:fix\r\n```\r\n\r\n## API Routes\r\n\r\n- `GET /api/health-check` - Check service health\r\n\r\n## Logging\r\n\r\nLogs are configured to rotate daily with separate files for combined logs and error logs. Check the `logs` directory for:\r\n\r\n- `combined-[DATE].log` - All logs including HTTP requests\r\n- `error-[DATE].log` - Error logs only\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License.\r\n',
    'aliases.sh':
        '## aliases.sh\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/93940616-2c34-494c-815b-4fa1b98d6be3/deploy-status)](https://app.netlify.com/sites/aliases-sh/deploys)\n\n[aliases.sh](https://aliases.sh)\n\nA curated list of bash aliases, aimed mostly at developers. Includes an alias concatenating the whole directory into a text file for LLM workflows. Heavily influenced by my personal preference :)\n',
    'tiles-town':
        '## Tiles Town\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/e376a228-9575-47c8-bafa-1493adaee126/deploy-status)](https://app.netlify.com/sites/tiles-town/deploys)\n\n[tiles.town](https://tiles.town)\n\nhttps://github.com/user-attachments/assets/1f16c318-b9dd-48d1-8d5a-c5e3693cc033\n\nPuzzle game with a global scoreboard requiring you to flip all tiles to the same side. Built ages ago in jQuery as a toy project to learn JavaScript better, then rewritten in 2016-ish to learn React + Redux, more recently rewritten to TypeScript.\n\nThe backend is also open source and available [here](https://github.com/Tenemo/tiles-town-backend).\n\n',
    'particle-golf':
        "## Particle Golf\n\n[particle.golf](https://particle.golf)\n\n\nToy project tracing particle paths governed by solving each coordinate's formula with a time variable in 60+ fps. Developed to learn three.js and WebGL.\n\nhttps://github.com/user-attachments/assets/24082123-dde0-4881-8a14-0033bd9046f4\n\n### Deployment Status\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/58402d25-6778-41b0-9900-12b6f3f31ad7/deploy-status)](https://app.netlify.com/sites/particle-golf/deploys)\n\n### Stack\n\n-   TypeScript – strongly typed JavaScript\n-   React.js\n-   three.js on top of WebGL – rendering\n-   math.js – expression parsing\n-   Webpack 5 + Babel 7 – transpilation and building\n-   ESLint + Stylelint + Prettier with VSCode extensions\n-   sentry.io – error & performance tracking\n",
} as Partial<Record<string, string>>;
